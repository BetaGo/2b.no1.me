{"version":3,"sources":["webpack:///./src/components/Pagination.tsx","webpack:///./src/components/icons/theme-switch.tsx","webpack:///./src/templates/index.tsx"],"names":["Nav","styled","nav","theme","palette","background","paper","text","primary","darken","default","Pagination","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","to","rel","String","fromCharCode","Array","from","length","_","i","key","className","ThemeSwitchIcon","viewBox","version","xmlns","d","p-id","HomePosts","ThemeSwitchWrapper","div","pageQuery","IndexPage","props","toggleThemeMode","useThemeMode","width","data","header","childImageSharp","fluid","sizes","split","height","Number","aspectRatio","css","Helmet","lang","config","title","name","content","description","property","siteUrl","src","facebook","googleSiteVerification","twitter","Wrapper","outer","SiteHeader","style","backgroundImage","inner","logo","maxHeight","fixed","alt","SiteNav","isHome","onClick","id","SiteMain","PostFeed","PostFeedRaise","allMarkdownRemark","edges","map","post","node","frontmatter","draft","PostCard","fields","slug","children","pageContext","Footer"],"mappings":"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","file":"component---src-templates-index-tsx-5d62df821fe59ba42519.js","sourcesContent":["import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\nimport styled from '../styles/styled';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Nav = styled.nav`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: ${({ theme }) => theme.palette.background.paper};\n    color: ${({ theme }) => theme.palette.text.primary};\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color 0.3s;\n    border: 1px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 2px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      box-shadow: inset 3px 0px 0px 0px\n        ${({ theme }) => darken(0.1, theme.palette.background.default)};\n    }\n\n    &:hover:not(.active) {\n      background-color: ${({ theme }) => darken(0.1, theme.palette.background.default)};\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <Nav>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link\n            key={`pagination-number${i + 1}`}\n            className={i + 1 === currentPage ? 'active' : ''}\n            to={`/${i === 0 ? '' : i + 1}`}\n          >\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </Nav>\n  );\n};\n\nexport default Pagination;\n","// tslint:disable:no-http-string\nimport * as React from 'react';\n\nconst ThemeSwitchIcon: React.FC = () => (\n  <svg viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M320 85.333333C243.626667 134.4 192 221.013333 192 320 192 418.986667 243.626667 505.6 321.28 554.666667 190.293333 554.666667 85.333333 449.706667 85.333333 320 85.333333 190.293333 190.293333 85.333333 320 85.333333M813.653333 149.333333 874.666667 210.346667 210.346667 874.666667 149.333333 813.653333 813.653333 149.333333M549.973333 253.013333 486.826667 213.333333 425.386667 256 443.306667 183.466667 384 138.24 458.666667 133.12 483.413333 62.72 512 132.266667 585.813333 133.546667 528.213333 181.76 549.973333 253.013333M409.173333 407.04 359.68 375.893333 311.893333 409.173333 326.4 352.853333 279.893333 317.44 337.92 313.6 357.12 258.56 378.88 312.746667 436.906667 314.026667 392.106667 351.146667 409.173333 407.04M810.666667 576C810.666667 705.706667 705.706667 810.666667 576 810.666667 523.946667 810.666667 475.733333 793.6 436.906667 765.013333L765.013333 436.906667C793.6 475.733333 810.666667 523.946667 810.666667 576M622.933333 856.746667 741.12 807.68 730.88 950.613333 622.933333 856.746667M807.68 741.546667 856.746667 623.36 950.613333 731.733333 807.68 741.546667M856.746667 529.92 808.106667 411.306667 950.613333 421.546667 856.746667 529.92M410.88 807.68 529.066667 856.746667 421.12 950.186667 410.88 807.68Z\"\n      p-id=\"879\"\n    ></path>\n  </svg>\n);\nexport default ThemeSwitchIcon;\n","import { graphql } from 'gatsby';\nimport * as React from 'react';\nimport { css } from '@emotion/core';\nimport Helmet from 'react-helmet';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport config from '../website-config';\nimport Pagination from '../components/Pagination';\n\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport styled from '../styles/styled';\nimport ThemeSwitchIcon from '../components/icons/theme-switch';\nimport { useThemeMode } from '../hooks/useThemeMode';\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card:nth-of-type(6n + 1):not(.no-image) {\n      flex: 1 1 100%;\n      flex-direction: row;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      border-radius: 2px 0 0 2px;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-content {\n      flex: 0 1 357px;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) h2 {\n      font-size: 2.6rem;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) p {\n      font-size: 1.8rem;\n      line-height: 1.55em;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-content-link {\n      padding: 30px 40px 0;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-meta {\n      padding: 0 40px 30px;\n    }\n  }\n`;\n\nconst ThemeSwitchWrapper = styled.div`\n  position: absolute;\n  padding: 3px;\n  top: 16px;\n  width: 32px;\n  height: 32px;\n  right: 16px;\n  background: rgba(255, 255, 255, 0.8);\n  border-radius: 50%;\n  cursor: pointer;\n`;\nexport interface IndexProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: {\n      childImageSharp: {\n        fixed: any;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fluid: any;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IndexProps> = (props) => {\n  const [, toggleThemeMode] = useThemeMode();\n  const width = props.data.header.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0];\n  const height = String(Number(width) / props.data.header.childImageSharp.fluid.aspectRatio);\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fluid.src}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fluid.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width} />\n        <meta property=\"og:image:height\" content={height} />\n      </Helmet>\n      <Wrapper>\n        <header\n          css={[outer, SiteHeader]}\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fluid.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteHeaderContent>\n              <SiteTitle>\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '45px' }}\n                    src={props.data.logo.childImageSharp.fixed.src}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n            <SiteNav isHome />\n          </div>\n          <ThemeSwitchWrapper onClick={() => toggleThemeMode()}>\n            <ThemeSwitchIcon />\n          </ThemeSwitchWrapper>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed, PostFeedRaise]}>\n              {props.data.allMarkdownRemark.edges.map((post) => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} />\n                  )\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        <Pagination\n          currentPage={props.pageContext.currentPage}\n          numPages={props.pageContext.numPages}\n        />\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/wantong-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"img/blog-cover.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fluid(maxWidth: 2000) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}